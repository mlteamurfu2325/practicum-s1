import time
from pathlib import Path
from typing import Dict

import pysubs2
import streamlit as st
import streamlit_ext as ste
from faster_whisper import WhisperModel
from pytube import YouTube
from streamlit_extras.stylable_container import stylable_container

from llm_summ.summ_fetcher import fetch_summary
from utils.cuda_checker import check_cuda
from utils.data_validator import validate_youtube_url
from utils.upload_file_saver import save_uploaded_file


st.set_page_config(
    page_title="–¢—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä-–∞–Ω–Ω–æ—Ç–∞—Ç–æ—Ä",
    page_icon="üéôÔ∏è",
)

st.markdown("### üìñ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≥—Ä—É–ø–ø—ã 1.12")

uploaded_file_path = ""
with st.container():
    st.write("–í—ã–±–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è")
    file_mode = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ",
        ["–° –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–° YouTube"],
        index=0,
        help="–° –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –í–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –° YouTube - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ —Å YouTube.",
    )
    if file_mode == "–° –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞":
        uploaded_file = st.file_uploader(
            label="üîΩ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞",
            type=["mp3", "wav", "mp4", "webm"],
            accept_multiple_files=False,
        )

        if uploaded_file is not None:
            st.session_state["file_path"] = save_uploaded_file(uploaded_file)

    else:
        url = st.text_input(
            label="–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube",
            placeholder="–°—Å—ã–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ https://www.youtube.com/watch?v=...",
            key="yt_url_input",
        )
        if not validate_youtube_url(url):
            need_url_message = (
                "üôÉ –Ø –∏—Å—á–µ–∑–Ω—É, –∫–æ–≥–¥–∞ –í—ã –≤–≤–µ–¥—ë—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube."
                + "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ/—Ç–∞–ø–Ω–∏—Ç–µ "
                + "–ø–æ –ª—é–±–æ–º—É –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ"
            )
            st.info(need_url_message)

        else:
            chosen = st.button("üì∫ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å YouTube")
            if chosen:
                tmp_dir_path = Path("../media")
                tmp_dir_path.mkdir(parents=True, exist_ok=True)
                tmp_name = url.split("?v=")[1] + ".mp4"
                uploaded_file_path = tmp_dir_path / tmp_name
                st.session_state["file_path"] = uploaded_file_path
                try:
                    yt = YouTube(url)
                    stream = yt.streams.get_audio_only()
                    with st.spinner("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª..."):
                        stream.download(output_path=tmp_dir_path, filename=tmp_name)
                        st.toast(f"üíØ –§–∞–π–ª —Å YouTube –∑–∞–≥—Ä—É–∂–µ–Ω {uploaded_file_path}")
                except Exception:
                    st.error(
                        "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                    )

    with st.expander("üóÉÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"):
        summary_checkbox = st.checkbox("üîé –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", value=False)
        transcribe_text = ""

        if summary_checkbox:
            model_options: Dict[str, str] = {
                "google/gemma-7b-it:nitro": "Gemma 7B (nitro) [–ø–ª–∞—Ç–Ω–æ]",
                "google/gemma-7b-it:free": "Gemma 7B [–±–µ—Å–ø–ª–∞—Ç–Ω–æ]",
                "google/gemini-pro": "Gemini Pro 1.0 [–ø–ª–∞—Ç–Ω–æ]",
                "openai/gpt-4-turbo-preview": "GPT 4 Turbo Preview [–ø–ª–∞—Ç–Ω–æ]",
            }

            selected_model = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å LLM –¥–ª—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                options=list(model_options.keys()),
                format_func=lambda x: model_options[x],
            )

    transcribe = st.button(
        label="üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ!",
        disabled=not st.session_state.get("file_path"),
    )

    if transcribe:
        time_start = time.time()
        uploaded_file_path = st.session_state["file_path"]

        with st.spinner("üöö –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å. –ú–∏–Ω—É—Ç–∫—É..."):
            if check_cuda():
                selected_model_path = "../models/faster-whisper/large-v2/"
                local_device = "cuda"
                selected_compute_type = "int8_float16"
                st.toast(body="–û–±–Ω–∞—Ä—É–∂–µ–Ω GPU. –ë—É–¥–µ—Ç —É—Å–∫–æ—Ä—è—Ç—å—Å—è!", icon="üöÄ")
            else:
                selected_model_path = "../models/faster-whisper/medium/"
                local_device = "cpu"
                selected_compute_type = "int8"
                st.toast(body="–û–±–Ω–∞—Ä—É–∂–µ–Ω CPU. –ü—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å...", icon="üêå")

            model = WhisperModel(
                model_size_or_path=selected_model_path,
                device=local_device,
                compute_type=selected_compute_type,
                num_workers=4,
                local_files_only=True,
            )

        with st.spinner("üî¨ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞. –ú–∏–Ω—É—Ç–∫—É..."):
            segments, info = model.transcribe(
                audio=str(uploaded_file_path), beam_size=5
            )

        st.write(
            f"üåç –Ø–∑—ã–∫ —Ä–µ—á–∏: {info.language.upper()} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {round(info.language_probability,2)}"
        )

        st.write(f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: {round(info.duration, 2)}")

        progress_text = "‚è≥ –ò–¥—ë—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏–æ"

        segments_bar = st.progress(0, text=progress_text)

        with st.expander("üìú –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–µ–∫—Å—Ç–∞"):
            transcr_text = ""
            segments_for_srt = []
            for segment in segments:
                st.write(
                    "[%.2fs -> %.2fs] %s" % (segment.start, segment.end, segment.text)
                )
                transcr_text += segment.text + " "
                segment_dict = {
                    "start": segment.start,
                    "end": segment.end,
                    "text": segment.text,
                }
                segments_for_srt.append(segment_dict)
                curr_bar_val = min(segment.end / info.duration, 1.0)
                segments_bar.progress(curr_bar_val, text=progress_text)

                if summary_checkbox:
                    transcribe_text += segment.text + " "

            time_total = time.time() - time_start

            # change progress bar color when done
            st.markdown(
                """
            <style>
                .stProgress > div > div > div > div {
                    background-color: green;
                }
            </style>""",
                unsafe_allow_html=True,
            )

        with st.expander("üìñ –¢–µ–∫—Å—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ãÃÅ—Ö –º–µ—Ç–æ–∫:"):
            # wrap text to fit in the container with copy-to-clipboard
            with stylable_container(
                "codeblock",
                """
                code {
                    white-space: pre-wrap !important;
                }
                """,
            ):
                st.code(body=transcr_text, language=None)

        with st.expander("üîé –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"):
            if summary_checkbox:
                with st.spinner("üïµÔ∏è‚Äç‚ôÇÔ∏è –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç..."):
                    summarized_text = fetch_summary(
                        text=transcr_text, llm_model=selected_model
                    )
                    with stylable_container(
                        "codeblock",
                        """
                        code {
                            white-space: pre-wrap !important;
                        }
                        """,
                    ):
                        st.code(body=summarized_text, language=None)

        with st.expander("üéûÔ∏è SRT-—Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"):
            subs = pysubs2.load_from_whisper(segments_for_srt)
            srt_fine_name = f"{Path(uploaded_file_path).name}.srt"
            srt_file_path = f"../media/{srt_fine_name}"
            subs.save(srt_file_path)
            with open(srt_file_path) as f:
                ste.download_button("üìé –°–∫–∞—á–∞—Ç—å SRT", f, file_name=srt_fine_name)

        with st.expander("üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.markdown(f"*–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏*: {round(time_total)} —Å.")
