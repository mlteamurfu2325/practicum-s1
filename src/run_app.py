import time
from pathlib import Path

import pysubs2
import streamlit as st
import streamlit_ext as ste
from faster_whisper import WhisperModel
from pytube import YouTube
from st_copy_to_clipboard import st_copy_to_clipboard

from llm_summ.summ_fetcher import fetch_summary
from utils.cuda_checker import check_cuda


# No type hints yet available for Streamlit
# See https://github.com/streamlit/streamlit/issues/7801
def save_uploaded_file(uploaded_file) -> Path:
    """
    Save an uploaded file to the specified directory and return the file path.

    :param uploaded_file: The file uploaded by the user through the Streamlit interface.
    :return: The path to the saved file.
    :rtype: Path
    """
    dir_path = Path("../media")
    dir_path.mkdir(parents=True, exist_ok=True)

    # create a path object for the file
    file_path = dir_path / uploaded_file.name

    # write the file
    with file_path.open("wb") as f:
        f.write(uploaded_file.getbuffer())

    st.toast(f"Saved file: {file_path}")

    return file_path


st.markdown("### üìñ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≥—Ä—É–ø–ø—ã 1.12")

uploaded_file_path = ""
with st.container():
    st.write("–í—ã–±–æ—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è")
    file_mode = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ",
        ["–° –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–° YouTube"],
        index=0,
        help='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–° –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–° YouTube" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ —Å YouTube.',
    )
    if file_mode == "–° –í–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞":
        uploaded_file = st.file_uploader(
            label="üîΩ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞",
            type=["mp3", "wav", "mp4", "webm"],
            accept_multiple_files=False,
        )

        if uploaded_file is not None:
            st.session_state["file_path"] = save_uploaded_file(uploaded_file)

    else:
        url = st.text_input("–° YouTube", help="–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube")
        chosen = st.button("üéß –í—ã–±—Ä–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª")
        if chosen:
            tmp_dir_path = Path("../media")
            tmp_dir_path.mkdir(parents=True, exist_ok=True)
            tmp_name = url.split("?v=")[1] + ".mp4"
            uploaded_file_path = tmp_dir_path / tmp_name
            st.session_state["file_path"] = uploaded_file_path
            yt = YouTube(url)
            stream = yt.streams.get_audio_only()
            with st.spinner("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª..."):
                stream.download(output_path=tmp_dir_path, filename=tmp_name)
                st.toast(f"üíØ –§–∞–π–ª —Å YouTube –∑–∞–≥—Ä—É–∂–µ–Ω {uploaded_file_path}")

    with st.expander("üóÉÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"):
        summary_checkbox = st.checkbox("üîé –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", value=False)
        transcribe_text = ""

    transcribe = st.button("üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ!")

    if transcribe:
        time_start = time.time()
        uploaded_file_path = st.session_state["file_path"]

        with st.spinner("üöö –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å. –ú–∏–Ω—É—Ç–∫—É..."):
            if check_cuda():
                selected_model_path = "../models/faster-whisper/large-v3/"
                local_device = "cuda"
                selected_compute_type = "int8_float16"
                st.toast(body="–û–±–Ω–∞—Ä—É–∂–µ–Ω GPU. –ë—É–¥–µ—Ç —É—Å–∫–æ—Ä—è—Ç—å—Å—è!", icon="üöÄ")
            else:
                selected_model_path = "../models/faster-whisper/medium/"
                local_device = "cpu"
                selected_compute_type = "int8"
                st.toast(body="–û–±–Ω–∞—Ä—É–∂–µ–Ω CPU. –ü—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å...", icon="üêå")

            model = WhisperModel(
                model_size_or_path=selected_model_path,
                device=local_device,
                compute_type=selected_compute_type,
                num_workers=4,
                local_files_only=True,
            )

        with st.spinner("üî¨ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞. –ú–∏–Ω—É—Ç–∫—É..."):
            segments, info = model.transcribe(
                audio=str(uploaded_file_path), beam_size=5
            )

        st.write(
            f"üåç –Ø–∑—ã–∫ —Ä–µ—á–∏: {info.language} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {info.language_probability}"
        )

        st.write(f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: {info.duration}")

        progress_text = "‚è≥ –ò–¥—ë—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏–æ"

        segments_bar = st.progress(0, text=progress_text)

        with st.expander("üìú –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–µ–∫—Å—Ç–∞"):
            transcr_text = ""
            segments_for_srt = []
            for segment in segments:
                st.write(
                    "[%.2fs -> %.2fs] %s" % (segment.start, segment.end, segment.text)
                )
                transcr_text += segment.text + " "
                segment_dict = {
                    "start": segment.start,
                    "end": segment.end,
                    "text": segment.text,
                }
                segments_for_srt.append(segment_dict)
                curr_bar_val = min(segment.end / info.duration, 1.0)
                segments_bar.progress(curr_bar_val, text=progress_text)

                if summary_checkbox:
                    transcribe_text += segment.text + " "

            time_total = time.time() - time_start

            # change progress bar color when done
            st.markdown(
                """
            <style>
                .stProgress > div > div > div > div {
                    background-color: green;
                }
            </style>""",
                unsafe_allow_html=True,
            )

        with st.expander("üìñ –¢–µ–∫—Å—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ãÃÅ—Ö –º–µ—Ç–æ–∫:"):
            st.write(transcr_text)

        with st.expander("üîé –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"):
            if summary_checkbox:
                with st.spinner("üïµÔ∏è‚Äç‚ôÇÔ∏è –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç..."):
                    summarized_text = fetch_summary(text=transcr_text)
                    st.write(summarized_text)
                    st_copy_to_clipboard(summarized_text)

        with st.expander("üéûÔ∏è SRT-—Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"):
            subs = pysubs2.load_from_whisper(segments_for_srt)
            srt_fine_name = f"{Path(uploaded_file_path).name}.srt"
            srt_file_path = f"../media/{srt_fine_name}"
            subs.save(srt_file_path)
            with open(srt_file_path) as f:
                ste.download_button("üìé –°–∫–∞—á–∞—Ç—å SRT", f, file_name=srt_fine_name)

        with st.expander("üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.markdown(f"*–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏*: {round(time_total)} —Å.")
